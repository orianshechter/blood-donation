{"version":3,"sources":["utils/geoPointsFuncs.js","utils/timeFuncs.js","components/context/AddressesProvider.js","components/context/GeoLocationProvider.js","components/Location.js","components/LocationsList.js","components/map/Table.js","components/map/Map.js","components/time-picker/TimePicker.js","components/CurrentLocationButton.js","components/CitySearchBox.js","components/SelectDisplayType.js","App.js","index.js"],"names":["getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","a","Math","sin","cos","atan2","sqrt","deg","PI","getHour","time","timeHour","Date","getHours","timeMinutes","getMinutes","getDay","getDate","toLocaleString","split","replaceAll","AddressesContext","createContext","AddressesProvider","children","useState","addressesObjects","setAddressesObjets","allAddressesObjects","setAllAddressesObjects","startDate","setStartDate","endDate","setEndDate","useEffect","request","XMLHttpRequest","open","onload","this","status","filteredFetchedAddresses","JSON","parse","response","filter","address","location","times","timestamp_end","length","map","addressObj","shift","isPopupOpen","isListHovered","e","console","log","message","send","addressesObj","startTime","endTime","setDate","realEndTime","filteredAddressesObj","t","timestamp_start","getFilteredAddressesByTimes","Provider","value","onMouseAddressHover","addressObject","onMouseAddressOut","GeoLocationContext","israelCenter","GeoLocationProvider","mapCenter","setMapCenter","mapZoom","setMapZoom","locationsCenter","setLocationsCenter","successCurrentLocation","position","coords","latitude","longitude","errorCurrentLocation","setCenterToCurrentLocation","navigator","geolocation","getCurrentPosition","enableHighAccuracy","setTimeout","TimePresentation","className","ScheduleAppointment","target","rel","href","schedulingUrl","Location","useContext","showAllAddresses","setShowAllAddresses","isMadaStationLocation","unformatted","toString","includes","dir","onMouseEnter","onMouseLeave","id","onClick","isLocationClicked","isMobile","isBrowser","lat","lng","city","idx","Button","size","color","variant","CIRCLES_DISTANCES_KM","AddressesList","newAddresses","concat","sort","addressObj1","addressObj2","address1DistanceFromLoc","address2DistanceFromLoc","address1Radius","address2Radius","i","Table","timeDate","timeDay","hourStart","hourEnd","MapUpdateViewHandler","useMap","closePopup","setView","Map","MapContainer","center","zoom","scrollWheelZoom","tap","TileLayer","attribution","url","Pane","CircleMarker","pathOptions","opacity","radius","Marker","riseOnHover","riseOffset","autoPan","Popup","onOpen","onPopupOpen","onClose","onPopupClose","TimePicker","headerText","setHeaderText","DatePickerInput","forwardRef","ref","dateFormat","locale","he","selected","onChange","dates","start","end","selectsRange","calendarContainer","style","customInput","highlightDates","popperPlacement","IconButton","HighlightOff","CurrentLocationButton","locationsDiv","document","getElementById","scrollTop","CitySearchBox","cities","setCities","filterSearchOptions","createFilterOptions","limit","fetch","ok","json","data","fetchCities","Autocomplete","options","getOptionLabel","name","filterOptions","event","long","renderInput","params","InputProps","border","outlineWidth","borderRadius","width","fontSize","placeholder","type","inputProps","SelectDisplayType","setMainBodyDisplay","display","flexDirection","justifyContent","alignItems","padding","ButtonGroup","aria-label","App","mainBodyDisplay","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.583b53f9.chunk.js","sourcesContent":["function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the earth in km\n    var dLat = deg2rad(lat2-lat1);  // deg2rad below\n    var dLon = deg2rad(lon2-lon1); \n    var a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n      Math.sin(dLon/2) * Math.sin(dLon/2)\n      ; \n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n    var d = R * c; // Distance in km\n    return d;\n  }\n  \n  function deg2rad(deg) {\n    return deg * (Math.PI/180)\n  }\n\n  export {getDistanceFromLatLonInKm}","//returns hour in \"hh:mm\" format\nfunction getHour(time) {\n  let timeHour = new Date(time).getHours();\n  let timeMinutes = new Date(time).getMinutes();\n  if (timeMinutes === 0) {\n    timeMinutes = \"00\";\n  }\n  return timeHour + \":\" + timeMinutes;\n}\n\n//return day in hebrew\nfunction getDay(time) {\n  const daysInTheWeek = [\n    \"יום ראשון\",\n    \"יום שני\",\n    \"יום שלישי\",\n    \"יום רביעי\",\n    \"יום חמישי\",\n    \"יום שישי\",\n    \"יום שבת\",\n  ];\n  const dayNumber = new Date(time).getDay();\n  return daysInTheWeek[dayNumber];\n}\n\n//return date in \"dd/mm/yyyy\" format\nfunction getDate(time) {\n    return (new Date(time)).toLocaleString('he-il').split(',')[0].replaceAll('.','/')\n}\n\nfunction getFilteredAddressesByTimes(addressesObj, startTime, endTime) {\n  if(!endTime) {\n    endTime = new Date();\n\n    //In case endTime is null, we filter with default 30 days ahead of startTime\n    endTime.setDate(startTime.getDate() + 30)\n  }\n\n  // To include donations from the endTime's day\n  const realEndTime = new Date(endTime);\n  realEndTime.setDate(endTime.getDate() + 1);\n\n  let filteredAddressesObj = addressesObj.map(addressObj => {\n    let times = addressObj.times.filter(t =>\n        startTime <= new Date(t.timestamp_start)\n      && realEndTime >= new Date(t.timestamp_end));\n    return {\n      ...addressObj,\n      times\n    }\n  })\n\n  filteredAddressesObj = filteredAddressesObj.filter(addressesObj => addressesObj.times.length > 0);\n  return filteredAddressesObj;\n}\n\nexport { getDate,getDay,getHour, getFilteredAddressesByTimes }","import React, { createContext, useState, useEffect } from 'react'\nimport { getFilteredAddressesByTimes } from '../../utils/timeFuncs';\nexport const AddressesContext = createContext()\n\nexport const AddressesProvider = ({children}) => {\n    const [addressesObjects, setAddressesObjets] = useState(null);\n    const [allAddressesObjects, setAllAddressesObjects] = useState(null);\n    const [startDate, setStartDate] = useState(null);\n    const [endDate, setEndDate] = useState(null);\n\n    function onMouseAddressHover(addressObj) {\n        setAddressesObjets((addressesObjects) => {\n          return addressesObjects.map(addressObject => {\n            if(addressObject === addressObj){\n              return {\n                ...addressObj,\n                isListHovered: true,\n              };\n            }\n            else{\n              return {\n                ...addressObject,\n                isListHovered: false\n              }\n            }\n          })\n        })\n      }\n      function onMouseAddressOut(addressObj) {\n        setAddressesObjets((addressesObjects) => {\n          return addressesObjects.map(addressObject => {\n            if(addressObject === addressObj){\n              return {\n                ...addressObj,\n                isListHovered: false,\n              };\n            }\n            else{\n              return addressObject\n            }\n          })\n        })\n      }\n    useEffect(() => {\n        let url =\n          \"https://raw.githubusercontent.com/orianshechter/blood-donation-addresses/main/addresses.json\";\n        let request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n        request.onload = function () {\n          if (this.status === 200) {\n            try {\n              const fetchedAddresses = JSON.parse(this.response)\n              let filteredFetchedAddresses = fetchedAddresses.filter(a => {\n                  if(!(a.address.location)) {\n                      return false\n                  }\n                  const isDonationEnded = new Date(a.times[0].timestamp_end) < new Date();\n                  return !(isDonationEnded && a.times.length === 1);\n              });\n                filteredFetchedAddresses = filteredFetchedAddresses.map(addressObj => {\n                    if(addressObj.address.location) {\n                      const isDonationEnded = new Date(addressObj.times[0].timestamp_end) < new Date();\n                      if(isDonationEnded){\n                          addressObj.times.shift();\n                      }\n                      return {\n                          ...addressObj,\n                          isPopupOpen: false,\n                          isListHovered: false,\n                      }\n                    }});\n                setAllAddressesObjects(filteredFetchedAddresses);\n                setAddressesObjets(filteredFetchedAddresses);\n            } catch (e) {\n              console.log(e.message);\n            }\n          } else if (this.status === 400) {\n            setAddressesObjets([]);\n            setAllAddressesObjects([]);\n          }\n        };\n        request.send();\n      }, []);\n\n    useEffect(() => {\n        if(startDate) {\n            setAddressesObjets(getFilteredAddressesByTimes(allAddressesObjects, startDate, endDate));\n        } else {\n            setAddressesObjets(allAddressesObjects);\n        }\n    },[startDate, endDate, allAddressesObjects])\n\n    return(\n        <AddressesContext.Provider value = {{addressesObjects,\n            setAddressesObjets,\n            setAllAddressesObjects,\n            onMouseAddressHover,\n            onMouseAddressOut,\n            startDate, endDate,\n            setStartDate, setEndDate\n        }}>\n            {children}\n        </AddressesContext.Provider>\n    )\n}","import React, { createContext, useState, useEffect } from \"react\";\n\nexport const GeoLocationContext = createContext();\n\nconst israelCenter = [31.5, 34.65];\n\nexport const GeoLocationProvider = ({ children }) => {\n  const [mapCenter, setMapCenter] = useState(israelCenter);\n  const [mapZoom, setMapZoom] = useState(7);\n  const [locationsCenter, setLocationsCenter] = useState(israelCenter);\n  function successCurrentLocation(position) {\n    setMapCenter([position.coords.latitude, position.coords.longitude]);\n    setLocationsCenter([position.coords.latitude, position.coords.longitude]);\n    setMapZoom(11);\n  }\n  function errorCurrentLocation() {\n    console.log(\"error\");\n  }\n  function setCenterToCurrentLocation() {\n    navigator.geolocation.getCurrentPosition(\n      successCurrentLocation,\n      errorCurrentLocation,\n      {\n        enableHighAccuracy: true,\n      }\n    );\n  }\n\n  useEffect(() => {\n    setTimeout(setCenterToCurrentLocation, 2000);\n  },[])\n\n  return (\n    <GeoLocationContext.Provider\n      value={{\n        mapCenter,\n        setMapCenter,\n        mapZoom,\n        setMapZoom,\n        setCenterToCurrentLocation,\n        locationsCenter,\n        setLocationsCenter\n      }}\n    >\n      {children}\n    </GeoLocationContext.Provider>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { getHour, getDay, getDate } from \"../utils/timeFuncs\";\nimport { AddressesContext } from \"./context/AddressesProvider\";\nimport { GeoLocationContext } from \"./context/GeoLocationProvider\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport EventIcon from '@material-ui/icons/Event';\nimport Button from \"@material-ui/core/Button\";\nimport {isBrowser, isMobile} from 'react-device-detect';\n\nfunction Location({ addressObj }) {\n  const { onMouseAddressHover, onMouseAddressOut, setAddressesObjets } = useContext(\n    AddressesContext\n  );\n  const [showAllAddresses, setShowAllAddresses] = useState(false);\n  const {setMapCenter} = useContext(GeoLocationContext);\n\n  const isMadaStationLocation = addressObj.address.unformatted.toString().includes(`מד\"א`)\n  return (\n    <div\n      dir='rtl'\n      onMouseEnter={() => {\n        onMouseAddressHover(addressObj);\n      }}\n      onMouseLeave={() => {\n        onMouseAddressOut(addressObj);\n      }}\n      className={isMadaStationLocation ? \"address__mada\" : \"address\"}\n    >\n      <div\n        id=\"click__to__center__map\"\n        onClick={() => {\n          setAddressesObjets((addressesObjects) => {\n            return addressesObjects.map(addressObject => {\n              if(addressObject === addressObj){\n                return {\n                  ...addressObj,\n                  isLocationClicked: true\n                };\n              }\n              else{\n                return {\n                  ...addressObject,\n                  isLocationClicked: false\n                }\n              }\n            })\n          })\n          if(!isMobile && isBrowser) {\n            setMapCenter([\n              addressObj.address.location.lat,\n              addressObj.address.location.lng,\n            ]);\n          }\n        }}\n      >\n        <h3>{addressObj.address.city}</h3>\n\n        <p>{addressObj.address.unformatted}</p>\n\n        <TimePresentation addressObj={addressObj} time={addressObj.times[0]} />\n      </div>\n      {showAllAddresses &&\n        addressObj.times.map((time, idx) => {\n          //first date already has been displayed above\n          if (idx === 0) {\n            return;\n          }\n          return (\n              <TimePresentation key={time.timestamp_start} addressObj={addressObj} time={time} />\n          );\n        })}\n      <div>\n        {showAllAddresses && addressObj.times.length > 1 && (\n          <Button\n            onClick={() => {\n              setShowAllAddresses(false);\n            }}\n            size=\"small\"\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            <ExpandLessIcon\n              color=\"secondary\"\n              onClick={() => setShowAllAddresses(true)}\n            />\n            פחות תאריכים\n          </Button>\n        )}\n        {!showAllAddresses && addressObj.times.length > 1 && (\n          <Button\n            onClick={() => {\n              setShowAllAddresses(true);\n            }}\n            size=\"small\"\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            <ExpandMoreIcon\n              color=\"secondary\"\n              onClick={() => setShowAllAddresses(true)}\n            />\n            לעוד תאריכים\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst TimePresentation = ({ addressObj, time }) => {\n  return (\n      <div className=\"time\">\n        <ScheduleAppointment addressObj={addressObj} time={time} />\n        <p>{getDate(time.timestamp_start)}</p>\n        <p>{getDay(time.timestamp_start)}</p>\n        <p>\n          {getHour(time.timestamp_start)}-\n          {getHour(time.timestamp_end)}\n        </p>\n      </div>\n  )\n}\n\nconst ScheduleAppointment = ({ time }) => {\n  return (\n    <div className='save-to-calendar'>\n      <a target='_blank' rel='noreferrer' href={time.schedulingUrl}>\n        <EventIcon />\n      </a>\n    </div>\n  )\n}\nexport default Location;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport \"./LocationsList.css\";\nimport {getDistanceFromLatLonInKm} from '../utils/geoPointsFuncs'\nimport {AddressesContext} from './context/AddressesProvider'\nimport {GeoLocationContext} from './context/GeoLocationProvider'\nimport Location from './Location'\n\nconst CIRCLES_DISTANCES_KM = [0,10,20,30,40,50,60]\nfunction AddressesList() {\n  const {addressesObjects, setAllAddressesObjects } = useContext(AddressesContext);\n  const { locationsCenter } = useContext(GeoLocationContext)\n\n  useEffect(() => {\n    sortAddresses()\n  },[locationsCenter])\n\n  function sortAddresses() {\n    if(addressesObjects) {\n      setAllAddressesObjects(addressesObjects => {\n        let newAddresses = [].concat(addressesObjects)\n        newAddresses.sort((addressObj1, addressObj2) => {\n          if(! (addressObj1.address.location && addressObj2.address.location)) {\n            return 1\n          }\n          const address1DistanceFromLoc = getDistanceFromLatLonInKm(\n            addressObj1.address.location.lat,\n            addressObj1.address.location.lng,\n            locationsCenter[0],\n            locationsCenter[1]\n          );\n          const address2DistanceFromLoc = getDistanceFromLatLonInKm(\n            addressObj2.address.location.lat,\n            addressObj2.address.location.lng,\n            locationsCenter[0],\n            locationsCenter[1]\n          );\n          let address1Radius = 0\n          let address2Radius = 0\n          \n          for(let i=0;i<CIRCLES_DISTANCES_KM.length-1;i++) {\n            if(address1DistanceFromLoc > CIRCLES_DISTANCES_KM[i] && address1DistanceFromLoc < CIRCLES_DISTANCES_KM[i+1]){\n              address1Radius = i\n            }\n            if(address2DistanceFromLoc > CIRCLES_DISTANCES_KM[i] && address2DistanceFromLoc < CIRCLES_DISTANCES_KM[i+1]){\n              address2Radius = i\n            }\n          }\n          if(address1DistanceFromLoc > CIRCLES_DISTANCES_KM[CIRCLES_DISTANCES_KM.length-1]){\n            address1Radius = CIRCLES_DISTANCES_KM.length-1\n          }\n          if(address2DistanceFromLoc > CIRCLES_DISTANCES_KM[CIRCLES_DISTANCES_KM.length-1]){\n            address2Radius = CIRCLES_DISTANCES_KM.length-1\n          }\n\n          // when locations are close, we sort them by the timestamp\n          if(address1Radius === address2Radius && address1Radius !== CIRCLES_DISTANCES_KM.length-1) {\n            if(addressObj1.times[0].timestamp_start < addressObj2.times[0].timestamp_start){\n              return -1\n            }\n            return 1\n          }\n          else if(address1DistanceFromLoc < address2DistanceFromLoc){\n            return -1\n          }\n          else {\n            return 1\n          }\n        });\n        return newAddresses\n      })\n    }\n  }\n\n  if (!addressesObjects) {\n    return <div>Loading Locations...</div>;\n  }\n\n  return (\n    <div id=\"addresses\">\n      {addressesObjects.map((addressObj, idx) => {\n        if(idx > 20) {\n          return\n        }\n        if (addressObj) {\n          return (\n            <Location key = {idx} \n            addressObj={addressObj} />\n          );\n        }\n      })}\n    </div>\n  );\n}\n\nexport default AddressesList;\n","import React from 'react'\nimport {getHour, getDay,getDate} from '../../utils/timeFuncs'\nimport './Table.css'\nfunction Table({address, times}) {\n    return (\n      <div className=\"table__container\">\n        <h3 dir=\"rtl\">{address}</h3>\n        <br />\n        <table dir=\"rtl\" className=\"minimalistBlack\">\n          <thead>\n            <tr>\n              <th>תאריך</th>\n              <th>יום</th>\n              <th>שעות</th>\n            </tr>\n          </thead>\n          <tbody>\n            {times.map((time) => {\n              // const timeDate = (new Date(time.timestamp_start)).toLocaleString('he-il').split(',')[0].replace(',','/') \n              const timeDate = getDate(time.timestamp_start)\n              const timeDay = getDay(time.timestamp_start)\n              const hourStart = getHour(time.timestamp_start)\n              const hourEnd = getHour(time.timestamp_end)\n              return (\n                <tr key={time.timestamp_start}>\n                  <td>{timeDate}</td>\n                  <td>{timeDay}</td>\n                  <td>{`${hourStart}-${hourEnd}`}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n}\n\nexport default Table\n","import React, { useEffect, useContext, useState } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  Circle,\n  Pane,\n  useMap,\n  useMapEvent,\n  CircleMarker,\n} from \"react-leaflet\";\nimport Table from \"./Table\";\nimport { AddressesContext } from \"../context/AddressesProvider\";\nimport { GeoLocationContext } from \"../context/GeoLocationProvider\";\nimport \"./Map.css\";\n\nfunction MapUpdateViewHandler() {\n  const map = useMap();\n  const { mapCenter, locationsCenter, mapZoom, setCenterToCurrentLocation } = useContext(\n    GeoLocationContext\n  );\n  useEffect(() => {\n    map.closePopup();\n    map.setView(mapCenter);\n  }, [locationsCenter, mapCenter]);\n  \n  useEffect(() => {\n    if(locationsCenter && mapZoom) {\n      map.setView(locationsCenter, mapZoom);\n    }\n  }, [locationsCenter, mapZoom]);\n\n  // it's an empty component, only here to manage the map's state when user makes new search\n  return <></>;\n}\n\nfunction Map() {\n  const { addressesObjects, setAddressesObjets } = useContext(AddressesContext);\n  const { mapCenter, mapZoom } = useContext(GeoLocationContext);\n\n  function onPopupOpen(addressObj) {\n    setAddressesObjets((addressesObjects) => {\n      return addressesObjects.map((addressObject) => {\n        if (addressObject === addressObj) {\n          return {\n            ...addressObj,\n            isPopupOpen: true,\n            isLocationClicked: false,\n          };\n        } else {\n          return {\n            ...addressObject,\n            isLocationClicked: false,\n          };\n        }\n      });\n    });\n  }\n\n  function onPopupClose(addressObj) {\n    setAddressesObjets((addressesObjects) => {\n      return addressesObjects.map((addressObject) => {\n        if (addressObject === addressObj) {\n          return {\n            ...addressObj,\n            isPopupOpen: false,\n          };\n        } else {\n          return addressObject;\n        }\n      });\n    });\n  }\n\n  if (!addressesObjects) {\n    return <div>Loading Map...</div>;\n  }\n\n  return (\n    <div>\n      <MapContainer center={mapCenter} zoom={mapZoom} scrollWheelZoom={true} tap={false}>\n        <MapUpdateViewHandler />\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {addressesObjects.map((addressObj, idx) => {\n          const id = addressObj.address.unformatted;\n          const position = addressObj.address.location;\n          if (position) {\n            return (\n              <div key={idx}>\n                <Pane>\n                  <CircleMarker\n                    pathOptions={\n                      addressObj.isPopupOpen ||\n                      addressObj.isListHovered ||\n                      addressObj.isLocationClicked\n                        ? { color: \"red\", opacity: \"1\" }\n                        : { color: \"green\", opacity: 0.2 }\n                    }\n                    key={idx + \"circle\"}\n                    radius={20}\n                    center={[position.lat, position.lng]}\n                  />\n                </Pane>\n\n                    \n                <Marker\n                  key={idx}\n                  position={position}\n                  riseOnHover={true}\n                  riseOffset={250}\n                  autoPan={true}\n                >\n                  <Popup\n                    onOpen={() => {\n                      onPopupOpen(addressObj);\n                    }}\n                    onClose={() => {\n                      onPopupClose(addressObj);\n                    }}\n                  >\n                    <Table\n                      address={addressObj.address.unformatted}\n                      times={addressObj.times}\n                    />\n                  </Popup>\n                </Marker>\n              </div>\n            );\n          } else {\n            // handle undefined positions(in future updates)\n            return;\n          }\n        })}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, {useState, forwardRef, useContext} from 'react';\nimport DatePicker, {CalendarContainer} from 'react-datepicker';\nimport {he} from 'date-fns/locale';\nimport { HighlightOff } from \"@material-ui/icons\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './TimePicker.css';\nimport { AddressesContext } from '../context/AddressesProvider';\n\nfunction TimePicker() {\n    const { startDate, setStartDate, endDate, setEndDate } = useContext(AddressesContext);\n    const [headerText, setHeaderText] = useState(\"בחרו תאריך התחלה\");\n    const onChange = (dates) => {\n        const [start, end] = dates;\n        setStartDate(start);\n        setEndDate(end);\n        if(end) {\n            setHeaderText(\"בחרו תאריך התחלה\");\n        } else {\n            setHeaderText(\"בחרו תאריך סיום\");\n        }\n    };\n    const headerContainer = ({ className, children }) => {\n        return (\n            <CalendarContainer className={className}>\n                <div className=\"datepicker__header\">\n                    {headerText}\n                </div>\n                <div style={{ position: \"relative\" }}>{children}</div>\n            </CalendarContainer>\n        );\n    };\n    const DatePickerInput = forwardRef(({ value, onClick }, ref) => (\n        <div className=\"datepicker__input\" onClick={onClick} ref={ref}>\n            {value || \"ובתאריכים...\"}\n        </div>\n    ));\n    return (\n        <div id=\"datepicker\">\n            <DatePicker\n                dateFormat=\"dd/MM/yyyy\"\n                locale={he}\n                selected={startDate}\n                onChange={onChange}\n                startDate={startDate}\n                endDate={endDate}\n                selectsRange\n                calendarContainer={headerContainer}\n                customInput={<DatePickerInput />}\n                highlightDates={[new Date().getDate(), 1]}\n                popperPlacement=\"bottom\"\n            />\n            {startDate || endDate ?\n                <IconButton\n                    onClick={() => {\n                        setStartDate(null);\n                        setEndDate(null);\n                    }}\n                    size=\"small\"\n                    color=\"primary\"\n                    variant=\"contained\"\n                >\n                    <HighlightOff color=\"primary\" size=\"small\" />\n                </IconButton>\n            : <></>}\n        </div>\n    );\n}\n\nexport default TimePicker;","import React, { useContext } from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MyLocationOutlinedIcon from \"@material-ui/icons/MyLocationOutlined\";\nimport { GeoLocationContext } from \"./context/GeoLocationProvider\";\n\nfunction CurrentLocationButton() {\n  const { setCenterToCurrentLocation } = useContext(GeoLocationContext);\n  return (\n    <IconButton\n      onClick={() => {\n        setCenterToCurrentLocation();\n        let locationsDiv = document.getElementById(\"addresses\");\n        if (locationsDiv) {\n            //scroll the addresses list to top\n            locationsDiv.scrollTop = 0;\n        }\n      }}\n      size=\"small\"\n      color=\"primary\"\n      variant=\"contained\"\n    >\n      <MyLocationOutlinedIcon color=\"primary\" size=\"small\" />\n    </IconButton>\n  );\n}\n\nexport default CurrentLocationButton;\n","import React, {useContext, useEffect, useState} from \"react\";\nimport { GeoLocationContext } from \"./context/GeoLocationProvider\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\nimport CurrentLocationButton from \"./CurrentLocationButton\";\nimport './CitySearchBox.css';\n\nfunction CitySearchBox() {\n  const [cities, setCities]= useState([]);\n  const { setMapCenter, setMapZoom, setLocationsCenter } = useContext(\n    GeoLocationContext\n  );\n  const filterSearchOptions = createFilterOptions({\n    limit: 10,\n  });\n  useEffect(() => {\n      const fetchCities = async () => {\n          const response = await fetch('https://raw.githubusercontent.com/orianshechter/blood-donation-addresses/main/cities.json');\n          if (!response.ok) {\n              console.log('failed to fetch cities');\n              return;\n          }\n          const data = await response.json();\n          console.log({data});\n          setCities(data);\n      };\n\n      fetchCities();\n  }, []);\n  return (\n    <div dir=\"rtl\" id=\"search__bar\">\n      <Autocomplete\n        options={cities}\n        getOptionLabel={(city) => city.name}\n        filterOptions={filterSearchOptions}\n        onChange={(event, value) => {\n          if (value) {\n            let locationsDiv = document.getElementById(\"addresses\");\n            if (locationsDiv) {\n              //scroll the addresses list to top\n              locationsDiv.scrollTop = 0;\n            }\n            setMapCenter([value.lat, value.long]);\n            setLocationsCenter([value.lat, value.long])\n            setMapZoom(11)\n          }\n        }}\n        renderInput={(params) => (\n          <div ref={params.InputProps.ref}>\n            <input\n              style={{\n                border: \"10px\",\n                outlineWidth: \"0\",\n                borderRadius: \"99px\",\n                width: \"100%\",\n                fontSize: \"20px\",\n              }}\n              placeholder=\"אני רוצה לתרום דם ב..\"\n              type=\"text\"\n              {...params.inputProps}\n            />\n          </div>\n        )}\n      />\n      <CurrentLocationButton />\n    </div>\n  );\n}\n\nexport default CitySearchBox;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { ButtonGroup } from \"react-bootstrap\";\n\nfunction SelectDisplayType({ setMainBodyDisplay }) {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        fontSize: \"larger\",\n        alignItems: \"center\",\n        padding: \"6px\",\n      }}\n    >\n      הצג לפי:\n      <div style={{ padding: \"5px\" }} dir=\"ltr\">\n        <ButtonGroup aria-label=\"Basic example\">\n          <Button\n            onClick={() => {\n              setMainBodyDisplay(\"map\");\n            }}\n            variant=\"primary\"\n          >\n            מפה\n          </Button>\n          <Button\n            onClick={() => {\n              setMainBodyDisplay(\"locations\");\n            }}\n            variant=\"primary\"\n          >\n            רשימת כתובות\n          </Button>\n        </ButtonGroup>\n      </div>\n    </div>\n  );\n}\n\nexport default SelectDisplayType;\n","import React, {useEffect, useState} from 'react'\nimport './App.css'\n\nimport {BrowserView, MobileView} from 'react-device-detect';\n\nimport AddressesList from './components/LocationsList'\nimport Map from './components/map/Map'\nimport {AddressesProvider} from './components/context/AddressesProvider'\nimport {GeoLocationProvider} from './components/context/GeoLocationProvider'\nimport TimePicker from './components/time-picker/TimePicker';\nimport CitySearchBox from './components/CitySearchBox'\n\nimport SelectDisplayType from './components/SelectDisplayType'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [mainBodyDisplay, setMainBodyDisplay] = useState(\"locations\")\n  return (\n    <GeoLocationProvider>\n      <AddressesProvider>\n        <BrowserView>\n          <div id=\"app\">\n            <div id=\"page__header\">\n              <CitySearchBox />\n              <TimePicker />\n            </div>\n            <div dir=\"ltr\" id=\"page__body\">\n              <Map />\n              <AddressesList />\n            </div>\n          </div>\n        </BrowserView>\n\n        <MobileView>\n          <div id=\"app\">\n            <CitySearchBox />\n            <TimePicker />\n            <SelectDisplayType setMainBodyDisplay={setMainBodyDisplay} />\n\n            <div dir=\"ltr\" id=\"page__body\">\n              {mainBodyDisplay === \"map\" && <Map />}\n              {mainBodyDisplay === \"locations\" && <AddressesList />}\n            </div>\n          </div>\n        </MobileView>\n      </AddressesProvider>\n    </GeoLocationProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}