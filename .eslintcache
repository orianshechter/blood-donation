[{"/Users/oshechter/WebstormProjects/blood-donation/src/index.js":"1","/Users/oshechter/WebstormProjects/blood-donation/src/App.js":"2","/Users/oshechter/WebstormProjects/blood-donation/src/components/CitySearchBox.js":"3","/Users/oshechter/WebstormProjects/blood-donation/src/components/SelectDisplayType.js":"4","/Users/oshechter/WebstormProjects/blood-donation/src/components/context/AddressesProvider.js":"5","/Users/oshechter/WebstormProjects/blood-donation/src/components/LocationsList.js":"6","/Users/oshechter/WebstormProjects/blood-donation/src/components/context/GeoLocationProvider.js":"7","/Users/oshechter/WebstormProjects/blood-donation/src/components/map/Map.js":"8","/Users/oshechter/WebstormProjects/blood-donation/src/components/CurrentLocationButton.js":"9","/Users/oshechter/WebstormProjects/blood-donation/src/components/Location.js":"10","/Users/oshechter/WebstormProjects/blood-donation/src/components/map/Table.js":"11","/Users/oshechter/WebstormProjects/blood-donation/src/utils/geoPointsFuncs.js":"12","/Users/oshechter/WebstormProjects/blood-donation/src/database/cities.js":"13","/Users/oshechter/WebstormProjects/blood-donation/src/utils/timeFuncs.js":"14","/Users/oshechter/WebstormProjects/blood-donation/src/components/time-picker/TimePicker.js":"15"},{"size":221,"mtime":1654957773721,"results":"16","hashOfConfig":"17"},{"size":1559,"mtime":1654957773704,"results":"18","hashOfConfig":"17"},{"size":1765,"mtime":1654957773706,"results":"19","hashOfConfig":"17"},{"size":997,"mtime":1654957773710,"results":"20","hashOfConfig":"17"},{"size":3848,"mtime":1654957773711,"results":"21","hashOfConfig":"17"},{"size":3197,"mtime":1654957773709,"results":"22","hashOfConfig":"17"},{"size":1264,"mtime":1654957773712,"results":"23","hashOfConfig":"17"},{"size":4037,"mtime":1654957773714,"results":"24","hashOfConfig":"17"},{"size":837,"mtime":1654957773707,"results":"25","hashOfConfig":"17"},{"size":5035,"mtime":1654957773707,"results":"26","hashOfConfig":"17"},{"size":1224,"mtime":1654957773715,"results":"27","hashOfConfig":"17"},{"size":579,"mtime":1654957773722,"results":"28","hashOfConfig":"17"},{"size":122078,"mtime":1654957773719,"results":"29","hashOfConfig":"17"},{"size":1574,"mtime":1654957773723,"results":"30","hashOfConfig":"17"},{"size":2514,"mtime":1654957773717,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ejiafo",{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/oshechter/WebstormProjects/blood-donation/src/index.js",[],"/Users/oshechter/WebstormProjects/blood-donation/src/App.js",["68"],"import React, {useEffect, useState} from 'react'\nimport './App.css'\n\nimport {BrowserView, MobileView} from 'react-device-detect';\n\nimport AddressesList from './components/LocationsList'\nimport Map from './components/map/Map'\nimport {AddressesProvider} from './components/context/AddressesProvider'\nimport {GeoLocationProvider} from './components/context/GeoLocationProvider'\nimport TimePicker from './components/time-picker/TimePicker';\nimport CitySearchBox from './components/CitySearchBox'\n\nimport SelectDisplayType from './components/SelectDisplayType'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [mainBodyDisplay, setMainBodyDisplay] = useState(\"locations\")\n  return (\n    <GeoLocationProvider>\n      <AddressesProvider>\n        <BrowserView>\n          <div id=\"app\">\n            <div id=\"page__header\">\n              <CitySearchBox />\n              <TimePicker />\n            </div>\n            <div dir=\"ltr\" id=\"page__body\">\n              <Map />\n              <AddressesList />\n            </div>\n          </div>\n        </BrowserView>\n\n        <MobileView>\n          <div id=\"app\">\n            <CitySearchBox />\n            <TimePicker />\n            <SelectDisplayType setMainBodyDisplay={setMainBodyDisplay} />\n\n            <div dir=\"ltr\" id=\"page__body\">\n              {mainBodyDisplay === \"map\" && <Map />}\n              {mainBodyDisplay === \"locations\" && <AddressesList />}\n            </div>\n          </div>\n        </MobileView>\n      </AddressesProvider>\n    </GeoLocationProvider>\n  );\n}\n\nexport default App;\n","/Users/oshechter/WebstormProjects/blood-donation/src/components/CitySearchBox.js",[],"/Users/oshechter/WebstormProjects/blood-donation/src/components/SelectDisplayType.js",[],"/Users/oshechter/WebstormProjects/blood-donation/src/components/context/AddressesProvider.js",["69"],"import React, { createContext, useState, useEffect } from 'react'\nimport { getFilteredAddressesByTimes } from '../../utils/timeFuncs';\nexport const AddressesContext = createContext()\n\nexport const AddressesProvider = ({children}) => {\n    const [addressesObjects, setAddressesObjets] = useState(null);\n    const [allAddressesObjects, setAllAddressesObjects] = useState(null);\n    const [startDate, setStartDate] = useState(null);\n    const [endDate, setEndDate] = useState(null);\n\n    function onMouseAddressHover(addressObj) {\n        setAddressesObjets((addressesObjects) => {\n          return addressesObjects.map(addressObject => {\n            if(addressObject === addressObj){\n              return {\n                ...addressObj,\n                isListHovered: true,\n              };\n            }\n            else{\n              return {\n                ...addressObject,\n                isListHovered: false\n              }\n            }\n          })\n        })\n      }\n      function onMouseAddressOut(addressObj) {\n        setAddressesObjets((addressesObjects) => {\n          return addressesObjects.map(addressObject => {\n            if(addressObject === addressObj){\n              return {\n                ...addressObj,\n                isListHovered: false,\n              };\n            }\n            else{\n              return addressObject\n            }\n          })\n        })\n      }\n    useEffect(() => {\n        var url =\n          \"https://orianshechter.github.io/blood-donation-addresses/addresses.json\";\n        let request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n        request.onload = function () {\n          if (this.status === 200) {\n            try {\n              const fetchedAddresses = JSON.parse(this.response)\n              let filteredFetchedAddresses = fetchedAddresses.filter(a => {\n                  if(!(a.address.location && a.address.formatted !== 'bad_address')) {\n                      return false\n                  }\n                  const isDonationEnded = new Date(a.times[0].timestamp_end) < new Date();\n                  if(isDonationEnded && a.times.length === 1) {\n                      return false;\n                  }\n                  return true;\n              });\n                filteredFetchedAddresses = filteredFetchedAddresses.map(addressObj => {\n                    if(addressObj.address.location) {\n                      const isDonationEnded = new Date(addressObj.times[0].timestamp_end) < new Date();\n                      if(isDonationEnded){\n                          addressObj.times.shift();\n                      }\n                      return {\n                          ...addressObj,\n                          isPopupOpen: false,\n                          isListHovered: false,\n                      }\n                    }});\n                setAllAddressesObjects(filteredFetchedAddresses);\n                setAddressesObjets(filteredFetchedAddresses);\n            } catch (e) {\n              console.log(e.message);\n            }\n          } else if (this.status === 400) {\n            setAddressesObjets([]);\n            setAllAddressesObjects([]);\n          }\n        };\n        request.send();\n      }, []);\n\n    useEffect(() => {\n        if(startDate) {\n            setAddressesObjets(getFilteredAddressesByTimes(allAddressesObjects, startDate, endDate));\n        } else {\n            setAddressesObjets(allAddressesObjects);\n        }\n    },[startDate, endDate, allAddressesObjects])\n\n    return(\n        <AddressesContext.Provider value = {{addressesObjects,\n            setAddressesObjets,\n            setAllAddressesObjects,\n            onMouseAddressHover,\n            onMouseAddressOut,\n            startDate, endDate,\n            setStartDate, setEndDate\n        }}>\n            {children}\n        </AddressesContext.Provider>\n    )\n}","/Users/oshechter/WebstormProjects/blood-donation/src/components/LocationsList.js",["70","71","72","73"],"import React, { useEffect, useState, useContext } from \"react\";\nimport \"./LocationsList.css\";\nimport {getDistanceFromLatLonInKm} from '../utils/geoPointsFuncs'\nimport {AddressesContext} from './context/AddressesProvider'\nimport {GeoLocationContext} from './context/GeoLocationProvider'\nimport Location from './Location'\n\nconst CIRCLES_DISTANCES_KM = [0,10,20,30,40,50,60]\nfunction AddressesList() {\n  const {addressesObjects, setAllAddressesObjects } = useContext(AddressesContext);\n  const { locationsCenter } = useContext(GeoLocationContext)\n\n  useEffect(() => {\n    sortAddresses()\n  },[locationsCenter])\n\n  function sortAddresses() {\n    if(addressesObjects) {\n      setAllAddressesObjects(addressesObjects => {\n        let newAddresses = [].concat(addressesObjects)\n        newAddresses.sort((addressObj1, addressObj2) => {\n          if(! (addressObj1.address.location && addressObj2.address.location)) {\n            return 1\n          }\n          const address1DistanceFromLoc = getDistanceFromLatLonInKm(\n            addressObj1.address.location.lat,\n            addressObj1.address.location.lng,\n            locationsCenter[0],\n            locationsCenter[1]\n          );\n          const address2DistanceFromLoc = getDistanceFromLatLonInKm(\n            addressObj2.address.location.lat,\n            addressObj2.address.location.lng,\n            locationsCenter[0],\n            locationsCenter[1]\n          );\n          let address1Radius = 0\n          let address2Radius = 0\n          \n          for(let i=0;i<CIRCLES_DISTANCES_KM.length-1;i++) {\n            if(address1DistanceFromLoc > CIRCLES_DISTANCES_KM[i] && address1DistanceFromLoc < CIRCLES_DISTANCES_KM[i+1]){\n              address1Radius = i\n            }\n            if(address2DistanceFromLoc > CIRCLES_DISTANCES_KM[i] && address2DistanceFromLoc < CIRCLES_DISTANCES_KM[i+1]){\n              address2Radius = i\n            }\n          }\n          if(address1DistanceFromLoc > CIRCLES_DISTANCES_KM[CIRCLES_DISTANCES_KM.length-1]){\n            address1Radius = CIRCLES_DISTANCES_KM.length-1\n          }\n          if(address2DistanceFromLoc > CIRCLES_DISTANCES_KM[CIRCLES_DISTANCES_KM.length-1]){\n            address2Radius = CIRCLES_DISTANCES_KM.length-1\n          }\n\n          // when locations are close, we sort them by the timestamp\n          if(address1Radius === address2Radius && address1Radius !== CIRCLES_DISTANCES_KM.length-1) {\n            if(addressObj1.times[0].timestamp_start < addressObj2.times[0].timestamp_start){\n              return -1\n            }\n            return 1\n          }\n          else if(address1DistanceFromLoc < address2DistanceFromLoc){\n            return -1\n          }\n          else {\n            return 1\n          }\n        });\n        return newAddresses\n      })\n    }\n  }\n\n  if (!addressesObjects) {\n    return <div>Loading Locations...</div>;\n  }\n\n  return (\n    <div id=\"addresses\">\n      {addressesObjects.map((addressObj, idx) => {\n        if(idx > 20) {\n          return\n        }\n        if (addressObj) {\n          return (\n            <Location key = {idx} \n            addressObj={addressObj} />\n          );\n        }\n      })}\n    </div>\n  );\n}\n\nexport default AddressesList;\n","/Users/oshechter/WebstormProjects/blood-donation/src/components/context/GeoLocationProvider.js",["74"],"import React, { createContext, useState, useEffect } from \"react\";\n\nexport const GeoLocationContext = createContext();\n\nconst israelCenter = [31.5, 34.65];\n\nexport const GeoLocationProvider = ({ children }) => {\n  const [mapCenter, setMapCenter] = useState(israelCenter);\n  const [mapZoom, setMapZoom] = useState(7);\n  const [locationsCenter, setLocationsCenter] = useState(israelCenter);\n  function successCurrentLocation(position) {\n    setMapCenter([position.coords.latitude, position.coords.longitude]);\n    setLocationsCenter([position.coords.latitude, position.coords.longitude]);\n    setMapZoom(11);\n  }\n  function errorCurrentLocation() {\n    console.log(\"error\");\n  }\n  function setCenterToCurrentLocation() {\n    navigator.geolocation.getCurrentPosition(\n      successCurrentLocation,\n      errorCurrentLocation,\n      {\n        enableHighAccuracy: true,\n      }\n    );\n  }\n\n  useEffect(() => {\n    setTimeout(setCenterToCurrentLocation, 2000);\n  },[])\n\n  return (\n    <GeoLocationContext.Provider\n      value={{\n        mapCenter,\n        setMapCenter,\n        mapZoom,\n        setMapZoom,\n        setCenterToCurrentLocation,\n        locationsCenter,\n        setLocationsCenter\n      }}\n    >\n      {children}\n    </GeoLocationContext.Provider>\n  );\n};\n","/Users/oshechter/WebstormProjects/blood-donation/src/components/map/Map.js",["75","76","77","78","79","80","81","82"],"import React, { useEffect, useContext, useState } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  Circle,\n  Pane,\n  useMap,\n  useMapEvent,\n  CircleMarker,\n} from \"react-leaflet\";\nimport Table from \"./Table\";\nimport { AddressesContext } from \"../context/AddressesProvider\";\nimport { GeoLocationContext } from \"../context/GeoLocationProvider\";\nimport \"./Map.css\";\n\nfunction MapUpdateViewHandler() {\n  const map = useMap();\n  const { mapCenter, locationsCenter, mapZoom, setCenterToCurrentLocation } = useContext(\n    GeoLocationContext\n  );\n  useEffect(() => {\n    map.closePopup();\n    map.setView(mapCenter);\n  }, [locationsCenter, mapCenter]);\n  \n  useEffect(() => {\n    if(locationsCenter && mapZoom) {\n      map.setView(locationsCenter, mapZoom);\n    }\n  }, [locationsCenter, mapZoom]);\n\n  // it's an empty component, only here to manage the map's state when user makes new search\n  return <></>;\n}\n\nfunction Map() {\n  const { addressesObjects, setAddressesObjets } = useContext(AddressesContext);\n  const { mapCenter, mapZoom } = useContext(GeoLocationContext);\n\n  function onPopupOpen(addressObj) {\n    setAddressesObjets((addressesObjects) => {\n      return addressesObjects.map((addressObject) => {\n        if (addressObject === addressObj) {\n          return {\n            ...addressObj,\n            isPopupOpen: true,\n            isLocationClicked: false,\n          };\n        } else {\n          return {\n            ...addressObject,\n            isLocationClicked: false,\n          };\n        }\n      });\n    });\n  }\n\n  function onPopupClose(addressObj) {\n    setAddressesObjets((addressesObjects) => {\n      return addressesObjects.map((addressObject) => {\n        if (addressObject === addressObj) {\n          return {\n            ...addressObj,\n            isPopupOpen: false,\n          };\n        } else {\n          return addressObject;\n        }\n      });\n    });\n  }\n\n  if (!addressesObjects) {\n    return <div>Loading Map...</div>;\n  }\n\n  return (\n    <div>\n      <MapContainer center={mapCenter} zoom={mapZoom} scrollWheelZoom={true} tap={false}>\n        <MapUpdateViewHandler />\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {addressesObjects.map((addressObj, idx) => {\n          const id = addressObj.address.unformatted;\n          const position = addressObj.address.location;\n          if (position) {\n            return (\n              <div key={idx}>\n                <Pane>\n                  <CircleMarker\n                    pathOptions={\n                      addressObj.isPopupOpen ||\n                      addressObj.isListHovered ||\n                      addressObj.isLocationClicked\n                        ? { color: \"red\", opacity: \"1\" }\n                        : { color: \"green\", opacity: 0.2 }\n                    }\n                    key={idx + \"circle\"}\n                    radius={20}\n                    center={[position.lat, position.lng]}\n                  />\n                </Pane>\n\n                    \n                <Marker\n                  key={idx}\n                  position={position}\n                  riseOnHover={true}\n                  riseOffset={250}\n                  autoPan={true}\n                >\n                  <Popup\n                    onOpen={() => {\n                      onPopupOpen(addressObj);\n                    }}\n                    onClose={() => {\n                      onPopupClose(addressObj);\n                    }}\n                  >\n                    <Table\n                      address={addressObj.address.unformatted}\n                      times={addressObj.times}\n                    />\n                  </Popup>\n                </Marker>\n              </div>\n            );\n          } else {\n            // handle undefined positions(in future updates)\n            return;\n          }\n        })}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;\n","/Users/oshechter/WebstormProjects/blood-donation/src/components/CurrentLocationButton.js",[],"/Users/oshechter/WebstormProjects/blood-donation/src/components/Location.js",["83"],"import React, { useState, useContext } from \"react\";\nimport { getHour, getDay, getDate } from \"../utils/timeFuncs\";\nimport { AddressesContext } from \"./context/AddressesProvider\";\nimport { GeoLocationContext } from \"./context/GeoLocationProvider\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport EventIcon from '@material-ui/icons/Event';\nimport Button from \"@material-ui/core/Button\";\nimport {isBrowser, isMobile} from 'react-device-detect';\nimport { GoogleCalendar } from 'datebook'\n\nfunction Location({ addressObj }) {\n  const { onMouseAddressHover, onMouseAddressOut, setAddressesObjets } = useContext(\n    AddressesContext\n  );\n  const [showAllAddresses, setShowAllAddresses] = useState(false);\n  const {setMapCenter} = useContext(GeoLocationContext);\n\n  const isMadaStationLocation = addressObj.address.unformatted.toString().includes(`תחנת מד\"א`)\n      || addressObj.address.unformatted.toString().includes(`שרותי הדם מד\"א`);\n  return (\n    <div\n      dir='rtl'\n      onMouseEnter={() => {\n        onMouseAddressHover(addressObj);\n      }}\n      onMouseLeave={() => {\n        onMouseAddressOut(addressObj);\n      }}\n      className={isMadaStationLocation ? \"address__mada\" : \"address\"}\n    >\n      <div\n        id=\"click__to__center__map\"\n        onClick={() => {\n          setAddressesObjets((addressesObjects) => {\n            return addressesObjects.map(addressObject => {\n              if(addressObject === addressObj){\n                return {\n                  ...addressObj,\n                  isLocationClicked: true\n                };\n              }\n              else{\n                return {\n                  ...addressObject,\n                  isLocationClicked: false\n                }\n              }\n            })\n          })\n          if(!isMobile && isBrowser) {\n            setMapCenter([\n              addressObj.address.location.lat,\n              addressObj.address.location.lng,\n            ]);\n          }\n        }}\n      >\n        <h3>{addressObj.address.city}</h3>\n\n        <p>{addressObj.address.unformatted}</p>\n\n        <div className=\"time\">\n          <p>{getDate(addressObj.times[0].timestamp_start)}</p>\n          <p>{getDay(addressObj.times[0].timestamp_start)}</p>\n          <p>\n            {getHour(addressObj.times[0].timestamp_start)}-\n            {getHour(addressObj.times[0].timestamp_end)}\n          </p>\n        </div>\n      </div>\n      {addressObj.isLocationClicked && <AddToCalendar addressObj={addressObj} />}\n      {showAllAddresses &&\n        addressObj.times.map((time, idx) => {\n          //first date already has been displayed above\n          if (idx === 0) {\n            return;\n          }\n          return (\n            <>\n              <div key={time.timestamp_start} className=\"time\" >\n                <p>{getDate(time.timestamp_start)}</p>\n                <p>{getDay(time.timestamp_start)}</p>\n                <p>\n                  {`${getHour(time.timestamp_start)}-${getHour(\n                    time.timestamp_end\n                  )}`}\n                </p>\n              </div>\n              <AddToCalendar addressObj={addressObj} time={time} />\n            </>\n          );\n        })}\n      <div>\n        {showAllAddresses && addressObj.times.length > 1 && (\n          <Button\n            onClick={() => {\n              setShowAllAddresses(false);\n            }}\n            size=\"small\"\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            <ExpandLessIcon\n              color=\"secondary\"\n              onClick={() => setShowAllAddresses(true)}\n            />\n            פחות תאריכים\n          </Button>\n        )}\n        {!showAllAddresses && addressObj.times.length > 1 && (\n          <Button\n            onClick={() => {\n              setShowAllAddresses(true);\n            }}\n            size=\"small\"\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            <ExpandMoreIcon\n              color=\"secondary\"\n              onClick={() => setShowAllAddresses(true)}\n            />\n            לעוד תאריכים\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst AddToCalendar = ({addressObj, time, showLabel = true}) => {\n  return (\n    <div className='save-to-calendar'>\n      <a target='_blank' rel='noreferrer' href={addToCalendarLink(addressObj, time)}>\n        <EventIcon />\n        {showLabel && <span>הוספה ליומן גוגל</span>}\n      </a>\n    </div>\n  )\n}\n\nconst addToCalendarLink = (addressObj, time = addressObj.times[0]) => {\n  const googleCalendar = new GoogleCalendar({\n    title: 'תרומת הדם שלי!',\n    start: new Date(time.timestamp_start),\n    end: new Date(time.timestamp_end),\n    location: addressObj.address.unformatted,\n    description: 'נא לזכור לבדוק שאין שינוי במיקום ושעות התרומה לפני היציאה לכיוון',\n  });\n\n  return googleCalendar.render();\n}\n\nexport default Location;\n","/Users/oshechter/WebstormProjects/blood-donation/src/components/map/Table.js",[],"/Users/oshechter/WebstormProjects/blood-donation/src/utils/geoPointsFuncs.js",[],"/Users/oshechter/WebstormProjects/blood-donation/src/database/cities.js",[],"/Users/oshechter/WebstormProjects/blood-donation/src/utils/timeFuncs.js",[],"/Users/oshechter/WebstormProjects/blood-donation/src/components/time-picker/TimePicker.js",[],{"ruleId":"84","severity":1,"message":"85","line":1,"column":16,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"89","line":63,"column":84,"nodeType":"90","messageId":"91","endLine":63,"endColumn":86},{"ruleId":"84","severity":1,"message":"92","line":1,"column":28,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":15,"column":5,"nodeType":"95","endLine":15,"endColumn":22,"suggestions":"96"},{"ruleId":"88","severity":1,"message":"89","line":80,"column":47,"nodeType":"90","messageId":"91","endLine":80,"endColumn":49},{"ruleId":"88","severity":1,"message":"97","line":82,"column":11,"nodeType":"98","messageId":"99","endLine":82,"endColumn":17},{"ruleId":"93","severity":1,"message":"100","line":31,"column":5,"nodeType":"95","endLine":31,"endColumn":7,"suggestions":"101"},{"ruleId":"84","severity":1,"message":"92","line":1,"column":40,"nodeType":"86","messageId":"87","endLine":1,"endColumn":48},{"ruleId":"84","severity":1,"message":"102","line":7,"column":3,"nodeType":"86","messageId":"87","endLine":7,"endColumn":9},{"ruleId":"84","severity":1,"message":"103","line":10,"column":3,"nodeType":"86","messageId":"87","endLine":10,"endColumn":14},{"ruleId":"84","severity":1,"message":"104","line":20,"column":48,"nodeType":"86","messageId":"87","endLine":20,"endColumn":74},{"ruleId":"93","severity":1,"message":"105","line":26,"column":6,"nodeType":"95","endLine":26,"endColumn":34,"suggestions":"106"},{"ruleId":"93","severity":1,"message":"105","line":32,"column":6,"nodeType":"95","endLine":32,"endColumn":32,"suggestions":"107"},{"ruleId":"84","severity":1,"message":"108","line":89,"column":17,"nodeType":"86","messageId":"87","endLine":89,"endColumn":19},{"ruleId":"88","severity":1,"message":"97","line":135,"column":13,"nodeType":"98","messageId":"99","endLine":135,"endColumn":20},{"ruleId":"88","severity":1,"message":"97","line":77,"column":13,"nodeType":"98","messageId":"99","endLine":77,"endColumn":20},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sortAddresses'. Either include it or remove the dependency array.","ArrayExpression",["109"],"Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'setCenterToCurrentLocation'. Either include it or remove the dependency array.",["110"],"'Circle' is defined but never used.","'useMapEvent' is defined but never used.","'setCenterToCurrentLocation' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.",["111"],["112"],"'id' is assigned a value but never used.",{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [locationsCenter, sortAddresses]",{"range":"121","text":"122"},"Update the dependencies array to be: [setCenterToCurrentLocation]",{"range":"123","text":"124"},"Update the dependencies array to be: [locationsCenter, map, mapCenter]",{"range":"125","text":"126"},"Update the dependencies array to be: [locationsCenter, map, mapZoom]",{"range":"127","text":"128"},[589,606],"[locationsCenter, sortAddresses]",[959,961],"[setCenterToCurrentLocation]",[639,667],"[locationsCenter, map, mapCenter]",[786,812],"[locationsCenter, map, mapZoom]"]